package glice

import (
	"path/filepath"
)

const (
	OverridesFilename = "overrides.yaml"
	OverridesNotes    = "This auto-generated by `glice overrides`.\n" +
		"It should be manually edited and vertified before being copied\n" +
		"into `glice.yaml` and then committing to version control."
)

var _ FilepathGetter = (*OverridesFile)(nil)

type OverridesFile struct {
	Filepath      string    `yaml:"-"`
	SchemaVersion string    `yaml:"schema"`
	Notes         string    `yaml:"notes"`
	Editors       Editors   `yaml:"editors"`
	Overrides     Overrides `yaml:"overrides"`
}

func NewOverridesFile(dir string) *OverridesFile {
	pf := &OverridesFile{
		Filepath: filepath.Join(dir, OverridesFilename),
		Notes:    OverridesNotes,
	}
	pf.ensureValidProperties()
	return pf
}

func (of *OverridesFile) GetFilepath() string {
	return of.Filepath
}

func (of *OverridesFile) Exists() (exists bool) {
	return FileExists(of.Filepath)
}

func (of *OverridesFile) ensureValidProperties() {
	if of.SchemaVersion == "" {
		of.SchemaVersion = ProjectFileSchemaVersion
	}
	if of.Overrides == nil {
		of.Overrides = make(Overrides, 0)
	}
}

func (of *OverridesFile) Create() error {
	return CreateYAMLFile(of)
}
